{"version":3,"sources":["articles/article_1.md","utils/button.js","utils/article.js","utils/navbar.js","utils/home.js","utils/all_articles.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Reflections","match","class","to","url","text","path","component","Reflection","exact","render","params","topicId","Navbar","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","list","ListElement","props","name","Home","map","articleName","App","className","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4GAAAA,EAAOC,QAAU,IAA0B,sC,0JCgB3C,I,sCCaaC,EAAc,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACzB,6BACE,sCACA,wBAAIC,MAAM,cACR,wBAAIA,MAAM,YACR,kBAAC,IAAD,CAAMC,GAAE,UAAKF,EAAMG,IAAX,eAAR,yBAEF,wBAAIF,MAAM,YACR,kBAAC,IAAD,CAAMC,GAAE,UAAKF,EAAMG,IAAX,gBAAR,eAEF,wBAAIF,MAAM,YACR,kBAAC,IAAD,CAAMC,GAAE,UAAKF,EAAMG,IAAX,mBAAR,oBAGHC,IAED,kBAAC,IAAD,CAAOC,KAAI,UAAKL,EAAMG,IAAX,aAA2BG,UAAWC,IACjD,kBAAC,IAAD,CACEC,OAAK,EACLH,KAAML,EAAMG,IACZM,OAAQ,kBAAM,4DAKdF,EAAa,SAAC,GAAD,IAAGP,EAAH,EAAGA,MAAH,OACjB,6BACE,4BAAKA,EAAMU,OAAOC,YCLPC,EA/CA,WACb,OACE,6BACE,yBAAKX,MAAM,iDACT,uBAAGA,MAAM,eAAeY,KAAK,KAA7B,oBAGA,4BACEZ,MAAM,iBACNa,KAAK,SACLC,cAAY,WACZC,cAAY,qBACZC,gBAAc,oBACdC,gBAAc,QACdC,aAAW,qBAEX,0BAAMlB,MAAM,yBAEd,yBAAKA,MAAM,2BAA2BmB,GAAG,qBACvC,wBAAInB,MAAM,cACR,wBAAIA,MAAM,mBACR,kBAAC,IAAD,CAAMA,MAAM,WAAWC,GAAG,IAAIW,KAAK,KAAnC,SAIF,wBAAIZ,MAAM,YACR,kBAAC,IAAD,CAAMA,MAAM,WAAWC,GAAG,eAAeW,KAAK,eAA9C,gBAIF,wBAAIZ,MAAM,YACR,kBAAC,IAAD,CAAMA,MAAM,WAAWC,GAAG,YAAYW,KAAK,KAA3C,aAIF,wBAAIZ,MAAM,YACR,kBAAC,IAAD,CAAMA,MAAM,WAAWC,GAAG,YAAYW,KAAK,KAA3C,kBCpBVQ,ECpBgB,CAAC,eAAgB,eAAgB,gBDsB/CC,EAAc,SAACC,GACnB,OACE,4BACE,kBAAC,IAAD,CAAMrB,GAAE,WAAMqB,EAAMC,OAASD,EAAMC,QAazC,IAYeC,EAZF,kBACX,6BACE,oCACA,yBAAKL,GAAG,WACR,4BACGC,EAAKK,KAAI,SAACC,GAAD,OACR,kBAAC,EAAD,CAAaH,KAAMG,UEvBZC,MAdf,WACE,OACE,2BACE,yBAAKC,UAAU,OAAf,4BACA,yBAAKA,UAAU,QACb,kBAAC,EAAD,OAGF,kBAAC,IAAD,CAAOrB,OAAK,EAACH,KAAK,IAAIC,UAAWmB,IACjC,kBAAC,IAAD,CAAOpB,KAAK,eAAeC,UAAWP,MCJxB+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASjC,MACvB,2D,MCVNkC,IAASzB,OACP,kBAAC,IAAM0B,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,OAFJ,KAMAC,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.02cbe051.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/article_1.d5d41e56.md\";","import React, { useState, useEffect } from \"react\";\n\nfunction PropButton(props) {\n  return (\n    <div class=\"list-group\">\n      <button\n        type=\"button\"\n        class=\"btn btn-primary list-group-item list-group-item-action\"\n        onClick={() => props.function(props.value)}\n      >\n        {props.text}\n      </button>\n    </div>\n  );\n}\n\nconst Buttons = () => {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <PropButton function={setCount} text=\"Reset\" value={0}></PropButton>\n      <PropButton function={setCount} text=\"Increment\" value={count + 1} />\n      <a href=\"\">{count}</a>\n    </div>\n  );\n};\n\nexport default Buttons;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n// import require from \"require\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport text from \"../articles/article_1.md\";\n\nconst list = [\"../articles/article_1.md\"];\n\n// const directoryPath = path.join(__dirname, \"../articles\");\n// //passsing directoryPath and callback function\n// fs.readdir(directoryPath, function (err, files) {\n//   //handling error\n//   if (err) {\n//     return console.log(\"Unable to scan directory: \" + err);\n//   }\n//   //listing all files using forEach\n//   files.forEach(function (file) {\n//     // Do whatever you want to do with the file\n//     console.log(file);\n//   });\n// });\n\nexport const Home = () => (\n  <div>\n    <h2>Home</h2>\n  </div>\n);\n\nexport const Reflections = ({ match }) => (\n  <div>\n    <h2>Topics</h2>\n    <ul class=\"navbar-nav\">\n      <li class=\"nav-item\">\n        <Link to={`${match.url}/rendering`}>Rendering with React</Link>\n      </li>\n      <li class=\"nav-item\">\n        <Link to={`${match.url}/components`}>Components</Link>\n      </li>\n      <li class=\"nav-item\">\n        <Link to={`${match.url}/props-v-state`}>Props v. State</Link>\n      </li>\n    </ul>\n    {text}\n\n    <Route path={`${match.url}/:topicId`} component={Reflection} />\n    <Route\n      exact\n      path={match.url}\n      render={() => <h3>Please select a topic.</h3>}\n    />\n  </div>\n);\n\nconst Reflection = ({ match }) => (\n  <div>\n    <h3>{match.params.topicId}</h3>\n  </div>\n);\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport Article from \"./article\";\n\nconst Navbar = () => {\n  return (\n    <div>\n      <nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\n        <a class=\"navbar-brand\" href=\"#\">\n          A Blog Next Door\n        </a>\n        <button\n          class=\"navbar-toggler\"\n          type=\"button\"\n          data-toggle=\"collapse\"\n          data-target=\"#navbarNavDropdown\"\n          aria-controls=\"navbarNavDropdown\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span class=\"navbar-toggler-icon\"></span>\n        </button>\n        <div class=\"collapse navbar-collapse\" id=\"navbarNavDropdown\">\n          <ul class=\"navbar-nav\">\n            <li class=\"nav-item active\">\n              <Link class=\"nav-link\" to=\"/\" href=\"#\">\n                Home\n              </Link>\n            </li>\n            <li class=\"nav-item\">\n              <Link class=\"nav-link\" to=\"/Reflections\" href=\"Reflections\">\n                Reflections\n              </Link>\n            </li>\n            <li class=\"nav-item\">\n              <Link class=\"nav-link\" to=\"/Projects\" href=\"#\">\n                Projects\n              </Link>\n            </li>\n            <li class=\"nav-item\">\n              <Link class=\"nav-link\" to=\"/Drawings\" href=\"#\">\n                Drawings\n              </Link>\n            </li>\n          </ul>\n        </div>\n      </nav>\n    </div>\n  );\n};\n\nexport default Navbar;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport listArticles from \"./all_articles\";\n\n// const listArticles = folderList(\"articles\");\n\nconst autoList = (listArt) => {\n  let list = document.createElement(\"ul\");\n\n  for (let i = 0; i < listArt.length; i++) {\n    let item = document.createElement(\"li\");\n\n    item.appendChild(document.createTextNode(listArt[i]));\n\n    list.appendChild(item);\n  }\n\n  return list;\n};\n\nlet list = listArticles;\n\nconst ListElement = (props) => {\n  return (\n    <li>\n      <Link to={`/${props.name}`}>{props.name}</Link>\n    </li>\n  );\n};\n\nfunction formatParams(params) {\n  return params\n    .map(function (param) {\n      return param.param + \":\" + param.childParam;\n    })\n    .join(\", \");\n}\n\nconst Home = () => (\n  <div>\n    <h2>Home</h2>\n    <div id=\"target\"></div>\n    <ul>\n      {list.map((articleName) => (\n        <ListElement name={articleName} />\n      ))}\n    </ul>\n  </div>\n);\n\nexport default Home;\n","const articleList = [\"article_1.md\", \"article_2.md\", \"article_3.md\"] \n\nexport default articleList;","import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport IterButton from \"./utils/button\";\nimport Navbar from \"./utils/navbar\";\nimport { Reflections } from \"./utils/article\";\nimport Home from \"./utils/home\";\n\nfunction App() {\n  return (\n    <p>\n      <div className=\"App\">Is this the krusty krab?</div>\n      <div className=\"Body\">\n        <Navbar />\n      </div>\n\n      <Route exact path=\"/\" component={Home} />\n      <Route path=\"/Reflections\" component={Reflections} />\n    </p>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n    ,\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}